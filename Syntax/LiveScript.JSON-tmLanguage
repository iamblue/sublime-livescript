{
    "name": "LiveScript",
    "scopeName": "source.LiveScript",
    "fileTypes": ["ls"],
    "patterns": [
        {
            "name": "comment.line.number-sign.LiveScript",
            "match": "#.*$",
            "comment": "Single line comment."
        },
        {
            "name": "comment.block.LiveScript",
            "begin": "/\\*",
            "end": "\\*/",
            "comment": "Block comment."
        },
        {
            "name": "string.LiveScript",
            "begin": "\"",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.LiveScript" }
            },
            "end": "\"",
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.LiveScript" }
            },
            "patterns": [
                {
                    "include": "#interpolated"
                },
                {
                    "include": "#escape"
                }
            ],
            "comment": "Double quoted string."
        },
        {
            "name": "string.LiveScript",
            "begin": "'",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.LiveScript" }
            },
            "end": "'",
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.LiveScript" }
            },
            "patterns": [
                {
                    "include": "#escape"
                }
            ],
            "comment": "Single quoted string."
        },
        {
            "name": "backslash.string.LiveScript",
            "match": "((\\\\)(.+?))(\\s|\\)|]|}|,|;|$)",
            "captures": {
                "1": { "name": "string.LiveScript" },
                "2": { "name": "punctuation.definition.string.begin.LiveScript" },
                "3": { "name": "string.quoted.other.LiveScript" }
            },
            "comment": "String without whitespace."
        },
        {
            "name": "string.regexp.LiveScript",
            "match": "/([^*\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])([^\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])*?/g?i?m?",
            "comment": "Single line regexp."
        },
        {
            "name": "multiline.regex.LiveScript",
            "begin": "/{2}",
            "end": "/{2}",
            "captures": {
                "0": { "name": "string.regexp.LiveScript" }
            },
            "patterns": [
                {
                    "name": "string.LiveScript",
                    "match": "."
                }
            ]
        },
        {
            "name": "string.array.LiveScript",
            "begin": "<\\[",
            "end": "\\]>",
            "beginCaptures": {
                "0": { "name": "declaration.tag.LiveScript" }
            },
            "endCaptures": {
                "0": { "name": "declaration.tag.LiveScript" }
            },
            "patterns": [
                {
                    "name": "string.LiveScript",
                    "match": "\\S"
                }
            ],
            "comment": "Lists of words."
        },
        {
            "name": "inline.function.LiveScript",
            "match": "\\s*(\\!\\s*)?((\\((?!.*\\())(.*?)(\\)))?\\s*(([-]{1,2}|[~]{1,2})>)",
            "captures": {
                "1": { "name": "storage.type.function.LiveScript" },
                "3": { "name": "storage.type.function.LiveScript" },
                "4": { "name": "variable.parameter.function.LiveScript"},
                "5": { "name": "storage.type.function.LiveScript" },
                "6": { "name": "storage.type.function.LiveScript" }
            },
            "comment": "Normal functions."
        },
        {
            "name": "function.LiveScript",
            "match": "\\s*(([^#(/\\*)]*?)\\s*(=|:|:=){1}\\s*)?(\\!\\s*)?((\\((?!.*\\())(.*?)(\\)))?\\s*(([-]{1,2}|[~]{1,2})>)",
            "captures": {
                "2": { "name": "entity.name.function.LiveScript"},
                "3": { "name": "keyword.operator.LiveScript"},
                "4": { "name": "storage.type.function.LiveScript" },
                "6": { "name": "storage.type.function.LiveScript" },
                "7": { "name": "variable.parameter.function.LiveScript"},
                "8": { "name": "storage.type.function.LiveScript" },
                "9": { "name": "storage.type.function.LiveScript" }
            },
            "comment": "Normal functions."
        },
        {
            "name": "named.function.LiveScript",
            "match": "\\s*(([^#(/\\*)]*?)\\s*(=|:|:=){1}\\s*)?(((\\!?~?|~?\\!?)\\s*(function))\\s*(\\S*)\\s*(.*))",
            "captures": {
                "2": { "name": "entity.name.function.LiveScript"},
                "3": { "name": "keyword.operator.LiveScript"},
                "6": { "name": "storage.type.function.LiveScript" },
                "7": { "name": "storage.type.function.LiveScript" },
                "8": { "name": "entity.name.function.LiveScript"},
                "9": { "name": "variable.parameter.function.LiveScript"}
            },
            "comment": "Named functons."
        },
        {
            "name": "infix.function.LiveScript",
            "match": "`.*?`",
            "captures": {
                "0": { "name": "entity.name.function.LiveScript" }
            },
            "comment": "Infix functions."
        },
        {
            "name": "backcall.LiveScript",
            "match": "(<(-{1,2}|~{1,2})!?)",
            "captures": {
                "1": { "name": "storage.type.function.LiveScript" }
            },
            "comment": "Backcall."
        },
        {
            "name": "dashed.variables.LiveScript",
            "match": "\\w+(-\\w)+",
            "comment": "Variables with dashes."
        },
        {
            "name": "arguments.function.LiveScript",
            "match": "&\\w+",
            "captures": {
                "0": { "name": "declaration.tag.LiveScript" }
            },
            "comment": "Shortcut for arguments."
        },
        {
            "name": "switch.statement.LiveScript",
            "begin": "[\\w|\\s]*(?<!\\|)(\\|)(?!\\|)[\\w|\\s]",
            "beginCaptures": {
                "1": { "name": "keyword.control.LiveScript" }
            },
            "end": "\\B=>\\B",
            "endCaptures": {
                "0": { "name": "keyword.control.LiveScript" }
            },
            "patterns": [
                { "include": "$self" }
            ],
            "comment": "Switch statement"
        },
        {
            "name": "class.LiveScript",
            "match": "(\\bclass\\b)\\s+(.*?)\\s+((extends)\\s+(.*?)\\s+)?((implements)\\s+(.*?)\\s+)?",
            "captures": {
                "1": { "name": "storage.type.class.LiveScript" },
                "2": { "name": "entity.name.type.class.LiveScript" },
                "4": { "name": "keyword.control.inheritance.LiveScript" },
                "5": { "name": "entity.other.inherited-class.LiveScript" },
                "7": { "name": "keyword.control.inheritance.LiveScript" },
                "8": { "name": "entity.other.inherited-class.LiveScript" }
            },
            "comment": "Classes with optional `extends` and `implments`"
        },
        {
            "name": "function.math.LiveScript",
            "match": "\\bMath\\.(abs|acos|asin|atan|atan2|ceil|cos|exp|floor|imul|log|max|min|pow|random|round|sin|sqrt|tan|toSource)\\b",
            "captures": {
                "1": { "name": "support.function.math.LiveScript"}
            }
        },
        {
            "name": "constants.math.LiveScript",
            "match": "\\bMath\\.(E|LN2|LN10|LOG2E|LOG10E|PI|SQRT1_2|SQRT2)\\b",
            "captures": {
                "1": { "name": "support.constant.math.LiveScript"}
            }
        },
        {
            "name": "console.LiveScript",
            "match": "\\bconsole\\.(debug|log|dir|error|group|groupCollapsed|groupEnd|info|log|time|timeEnd|trace|warn)\\b",
            "captures": {
                "1": { "name": "support.function.console.LiveScript"}
            }
        },
        {
            "include": "#numeric"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "escape": {
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "interpolated": {
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "begin": "\\#\\{",
                    "end": "\\}",
                    "patterns": [
                        { "include": "$self" }
                    ],
                    "comment": "Interpolated complex LiveScript expressions within strings."
                },
                {
                    "name": "constant.character.escape",
                    "match": "\\#(\\w+(-\\w*)*)\\b",
                    "captures": {
                        "1": { "name": "constant.character.escaped" }
                    },
                    "comment": "Interpolated simple LiveScript variables within strings."
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.LiveScript",
                    "match": "\\b(arguments|const|delete|import( all)?|instanceof|let|new|require|typeof(!)?|var|window)\\b",
                    "comment": "Keywords."
                },
                {
                    "name": "label.LiveScript",
                    "match": "^\\s*:(\\w+)",
                    "captures": {
                        "1": { "name": "keyword.LiveScript" }
                    },
                    "comment": "Label."
                },
                {
                    "name": "range.LiveScript",
                    "match": "\\b(by|from|til|to)\\b",
                    "captures": {
                        "1": { "name": "keyword.LiveScript" }
                    },
                    "comment": "Range keywords."
                },
                {
                    "name": "constant.language.boolean.LiveScript",
                    "match": "\\b(true|false|on|off|yes|no)\\b"
                },
                {
                    "name": "constant.language.LiveScript",
                    "match": "\\b(null|undefined|void)\\b"
                },
                {
                    "name": "constant.language.LiveScript",
                    "match": "@[\\w$\\-_]*"
                },
                {
                    "name": "keyword.control.LiveScript",
                    "match": "\\b(break|case|catch|continue|debugger|default|do|else|ever|finally|for|if|in|loop|match|of|return|switch|then|throw|try|unless|until|when|where|while|with)\\b"
                },
                {
                    "name": "variable.language.LiveScript",
                    "match": "\\b(it|fallthrough|otherwise|super|that|this)\\b"
                }
            ]
        },
        "numeric": {
            "patterns": [
                {
                    "name": "constant.numeric.LiveScript",
                    "match": "(?<!\\w)(\\b(\\d{1,2}~[\\d\\w]+)|(\\d+[\\d_]*(\\.[\\d_]+)?(e[+-]?[\\d_]+)?(\\w*))\\b)",
                    "captures": {
                        "6": { "name": "punctuation.definition.string.end.LiveScript" }
                    },
                    "comment": "All numbers, different bases, decimals, underscores and trailing characters."
                },
                {
                    "name": "support.constant.LiveScript",
                    "match": "Infinity|NaN",
                    "comment": "Magic numbers."
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "assignment.operators.LiveScript",
                    "match": "(?<![\\.?|&:\\+\\-\\*/%<>^])((\\?{1}|\\|{2}|&{2})?(=(?!=)|:=|\\+{1,2}=|-{1,2}=|\\*{1,2}=|/=|%{1,2}=|<\\?=|>\\?=|\\^=))",
                    "captures": {
                        "0": { "name": "keyword.operator.LiveScript" }
                    },
                    "comment": "Assignment operators."
                },
                {
                    "name": "relational.operators.LiveScript",
                    "match": "(?<!\\.)((={2}|\\bis(nt| not)?\\b|!=|!?~=|>=\\?|>=|>|<=\\?|<=|<))",
                    "captures": {
                        "1": { "name": "keyword.operators.LiveScript" }
                    },
                    "comment": "Relational operators."
                },
                {
                    "name": "numeric.operators.LiveScript",
                    "match": "(?<!\\.)((\\+|-(?!-?>)|\\*|/|%|\\^|\\.&\\.|\\.\\|\\.|\\.\\^\\.|\\.>{2,3}\\.|\\.<{2,3}\\.|~))",
                    "captures": {
                        "1": { "name": "keyword.operators.LiveScript" }
                    },
                    "comment": "Numeric operators."
                },
                {
                    "name": "boolean.operators.LiveScript",
                    "match": "(?<!\\.)((\\b(and|or|not|xor)\\b)|(\\B(\\||\\&|\\!)\\B))",
                    "captures": {
                        "0": { "name": "keyword.operators.LiveScript" }
                    },
                    "comment": "Boolean operators."
                },
                {
                    "name": "existence.operators.LiveScript",
                    "match": "(?<!\\.)((\\?|!\\?))",
                    "captures": {
                        "1": { "name": "keyword.operators.LiveScript" }
                    },
                    "comment": "Existence operators."
                }
            ]
        }
    },
    "uuid": "3dd79e1c-6cf0-4302-947b-ef00aa5e2a8d"
}
